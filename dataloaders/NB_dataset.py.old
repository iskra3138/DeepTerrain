import numpy as np
import os
import torch
import gin

from dataloaders.dataset import DatasetTemplate ## YJ

@gin.configurable
class NBDataset(DatasetTemplate):
    """A data loader template for the all dataset
    """
    def __init__(self, split, dataset_name, dataroot): # need to path
        super().__init__(split, dataset_name, dataroot)

    def scaling (self, array3D) :
        """
        array3D: [ch, W, H]
        """
        mins = []
        maxs = []
        for i in range(array3D.shape[0]):
            ch_min = array3D[i, :, :].min()
            ch_max = array3D[i, :, :].max()
            array3D[i, :, :] = (2 * (array3D[i, :, :] - ch_min) / (ch_max - ch_min)) - 1
            #array3D[i, :, :] /= ch_max
            mins.append(ch_min)
            maxs.append(ch_max)
        return array3D, mins, maxs

    def padding (self, array3D) :
        """
        args:
            array3D: [ch, 500, 500]
        return
            array3D: [ch, 512, 512]
        """
        row_zeros = np.zeros((array3D.shape[0], 6, 500))
        array3D = np.concatenate((row_zeros, array3D, row_zeros), axis=1)
        col_zeros = np.zeros((array3D.shape[0], 512, 6))
        array3D = np.concatenate((col_zeros, array3D, col_zeros), axis=2)

        return array3D

    def random_crop(self, A, B):
        """
        args:
            array3D: [ch, 512, 512]
        return
            array3D: [ch, 256, 256]
        """
        x, y = np.random.randint(256, size=2)
        A = A[:, x:x + 256, y:y + 256]
        B = B[:, x:x + 256, y:y + 256]

        return A, B

    def random_flip(self, A, B):
        """
        args:
            array3D: [ch, 256, 256]
        return
            array3D: [ch, 256, 256]
        """
        h, v = np.random.rand(2)
        if h > 0.5 :
            A = np.flip(A, axis=1)
            B = np.flip(B, axis=1)
        if v > 0.5:
            A = np.flip(A, axis=2)
            B = np.flip(B, axis=2)

        return A, B

    def __getitem__(self, index):
        A = np.load(os.path.join(self.A_path, self.filenames[index]))  # [channel, 512, 512]
        B = np.load(os.path.join(self.B_path, self.filenames[index]))  # [channel, 512, 512]

        # Normalization
        A, _, _ = self.scaling(A)
        B, mins, maxs = self.scaling(B)

        # Padding
        #A = self.padding(A)
        #B = self.padding(B)

        # Cropping & Flipping
        if self.split == 'train' :
            A, B = self.random_crop (A, B)
            A, B = self.random_flip(A, B)

        A = torch.from_numpy(A.astype(np.float32))
        B = torch.from_numpy(B.astype(np.float32))

        return {'A': A,
                'B': B,
                'B_min': mins[0],
                'B_max': maxs[0],
                'A_paths': os.path.join(self.A_path, self.filenames[index]),
                'B_paths': os.path.join(self.B_path, self.filenames[index])}




